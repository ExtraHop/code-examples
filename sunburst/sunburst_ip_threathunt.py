import argparse

import http.client
from urllib.parse import urlencode
import ssl

import json
import datetime

# requests.packages.urllib3.disable_warnings()

parser = argparse.ArgumentParser(description='Match ExtraHop curated SUNBURST IP IOCs')
parser.add_argument('-t', '--host', dest='host', help='EDA or ECA Host', default="extrahop")
parser.add_argument('-k', '--apikey', dest='apikey', help='ExtraHop API Key', required=True)
parser.add_argument('-l', '--lookback', dest='lookback', help='lookback, in weeks, to query', type=int, default=10)
parser.add_argument('-v', '--verbose', dest='verbose', help='Control output', type=bool, default=False)

parser.add_argument('--starttime', dest='starttime', help='Absolute search start time, in Epoch milliseconds', type=int, default=None)
parser.add_argument('--endtime', dest='endtime', help='Absolute search end time, in Epoch milliseconds', type=int, default=None)

parser.add_argument('--devicesfile', dest='devicesfile', help='File of devices to be searched', default=None)

parser.add_argument('--output-prefix', dest='prefix', help='Prefix for output files', default='')


args = parser.parse_args()


############################ USER CONFIGURATIONS ###############################
api_key = args.apikey
host = args.host

if args.starttime and args.endtime:
    if args.lookback:
        print(f'Both relative and absolute time search. Defaulting to absolute.')
    relative_time = args.starttime
    timestamp_end = args.endtime
else:
    relative_time = -1 *  args.lookback * 7 * 24 * 60 * 60 * 1000   # N weeks in milliseconds
    timestamp_end = 0                               # Current time

metric_category = "net_detail"
object_type = "device"
metric_spec_name = "bytes_out"

ip_file = 'ip_threats_sorted.txt'
########################## END USER CONFIGURATIONS #############################

context = ssl._create_unverified_context()
conn = http.client.HTTPSConnection(host, context=context)

headers = {'Content-Type': 'application/json',
           'Accept': 'application/json',
           'Authorization': 'ExtraHop apikey=' + api_key}


print(f'Quering {host} for data...')

device_details = {}
if args.devicesfile is None:
    print(f'Gathering devices...')

    limit = 1000

    params = {
        'active_from': relative_time,
        'active_until': timestamp_end,
        'limit': limit,
        'offset': 0
    }

    while True:
        try:
            conn.request('GET', f'/api/v1/devices?{urlencode(params)}', headers=headers)
            response = conn.getresponse()

        except Exception as e:
            raise e
        if response.status != 200:
            raise ValueError("cursor returned %s" % rsp.status_code)

        devices = json.loads(response.read().decode())
        if len(devices) == 0:
            break

        params['offset'] = params['offset'] + limit
        for device in devices:
            device_details[device['id']] = {
                'extrahop_id':  device['extrahop_id'],
                'display_name': device['display_name'],
                'macaddr': device['macaddr'],
                'ipaddr': device['ipaddr4'] if device['ipaddr4'] else device['ipaddr6'] if device['ipaddr6'] else ''
            }

    with open(f'./{args.prefix}_device_ids.csv', 'w') as f:
        f.write('id,extrahop_id,display_name,macaddr,ipaddr\n')
        f.writelines([f'{device},{device_details[device]["extrahop_id"]},' +
            f'{device_details[device]["display_name"]},{device_details[device]["macaddr"]},'+
            f'{device_details[device]["ipaddr"]}\n' for device in device_details])

    print(f'Found {len(device_details)} devices. Writing them to ./output/device_ids.txt')
else:
    with open(args.devicesfile, 'r') as f:
        line = f.readline().strip()
        if line[:2] != 'id':  # No header
            line = line.split(',')
            device_details[int(line[0])] = {
                'extrahop_id':  line[1],
                'display_name': line[2],
                'macaddr': line[3],
                'ipaddr': line[4],
            }
        for line in f.readlines():
            line = line.strip().split(',')
            device_details[int(line[0])] = {
                'extrahop_id':  line[1],
                'display_name': line[2],
                'macaddr': line[3],
                'ipaddr': line[4],
            }
    print(f'Read {len(device_details)} devices from  {args.devicesfile}')
print(f'Iterating through devices and searching for IP hits against ExtraHop IP IOC')

# with open('ip_threats_sorted.txt', 'r') as f:
#     ti_ips = {line.strip() for line in f.readlines()}

ti_ips = {
    "13.56.226.124","13.65.251.83","13.84.134.105","13.90.103.231","13.92.233.22","131.228.12.104","131.228.12.109","131.228.12.120","131.228.12.121","131.228.12.124","131.228.12.125","131.228.12.128","131.228.12.130","131.228.12.134","131.228.12.138","131.228.12.140","131.228.12.141","131.228.12.159","131.228.12.164","131.228.12.171","131.228.12.177","131.228.12.184","131.228.12.188","131.228.12.190","131.228.12.192","131.228.12.193","131.228.12.195","131.228.12.198","131.228.12.206","131.228.12.208","131.228.12.211","131.228.12.216","131.228.12.229","131.228.12.230","131.228.12.233","131.228.12.235","131.228.12.236","131.228.12.24","131.228.12.241","131.228.12.251","131.228.12.254","131.228.12.26","131.228.12.28","131.228.12.3","131.228.12.30","131.228.12.49","131.228.12.58","131.228.12.6","131.228.12.66","131.228.12.71","131.228.12.74","131.228.12.77","131.228.12.79","131.228.12.81","131.228.12.82","131.228.12.91","131.228.12.92","131.228.12.93","131.228.12.96","131.228.12.98","131.228.13.103","131.228.13.110","131.228.13.114","131.228.13.117","131.228.13.120","131.228.13.123","131.228.13.139","131.228.13.146","131.228.13.149","131.228.13.153","131.228.13.155","131.228.13.156","131.228.13.158","131.228.13.161","131.228.13.164","131.228.13.165","131.228.13.192","131.228.13.194","131.228.13.196","131.228.13.2","131.228.13.201","131.228.13.204","131.228.13.208","131.228.13.212","131.228.13.213","131.228.13.224","131.228.13.225","131.228.13.228","131.228.13.234","131.228.13.251","131.228.13.253","131.228.13.254","131.228.13.255","131.228.13.27","131.228.13.28","131.228.13.30","131.228.13.32","131.228.13.33","131.228.13.35","131.228.13.36","131.228.13.39","131.228.13.40","131.228.13.42","131.228.13.46","131.228.13.47","131.228.13.48","131.228.13.51","131.228.13.54","131.228.13.58","131.228.13.59","131.228.13.65","131.228.13.68","131.228.13.71","131.228.13.75","131.228.13.76","131.228.13.79","131.228.13.84","131.228.13.88","131.228.13.9","131.228.13.98","131.228.14.102","131.228.14.111","131.228.14.120","131.228.14.123","131.228.14.125","131.228.14.132","131.228.14.140","131.228.14.142","131.228.14.155","131.228.14.158","131.228.14.159","131.228.14.160","131.228.14.170","131.228.14.176","131.228.14.189","131.228.14.193","131.228.14.198","131.228.14.201","131.228.14.209","131.228.14.21","131.228.14.219","131.228.14.220","131.228.14.224","131.228.14.228","131.228.14.229","131.228.14.230","131.228.14.233","131.228.14.242","131.228.14.243","131.228.14.250","131.228.14.251","131.228.14.26","131.228.14.30","131.228.14.40","131.228.14.45","131.228.14.50","131.228.14.54","131.228.14.57","131.228.14.58","131.228.14.6","131.228.14.69","131.228.14.71","131.228.14.72","131.228.14.74","131.228.14.8","131.228.14.81","131.228.14.82","131.228.14.87","131.228.14.9","131.228.14.90","131.228.14.92","131.228.14.93","131.228.15.1","131.228.15.108","131.228.15.110","131.228.15.113","131.228.15.114","131.228.15.12","131.228.15.124","131.228.15.126","131.228.15.128","131.228.15.130","131.228.15.14","131.228.15.142","131.228.15.149","131.228.15.161","131.228.15.167","131.228.15.168","131.228.15.17","131.228.15.170","131.228.15.176","131.228.15.178","131.228.15.182","131.228.15.187","131.228.15.19","131.228.15.191","131.228.15.194","131.228.15.207","131.228.15.209","131.228.15.21","131.228.15.22","131.228.15.226","131.228.15.227","131.228.15.229","131.228.15.237","131.228.15.249","131.228.15.26","131.228.15.32","131.228.15.34","131.228.15.35","131.228.15.36","131.228.15.4","131.228.15.56","131.228.15.57","131.228.15.62","131.228.15.70","131.228.15.73","131.228.15.74","131.228.15.82","131.228.15.87","131.228.15.90","144.86.226.123","144.86.226.135","144.86.226.161","144.86.226.166","144.86.226.197","144.86.226.202","144.86.226.226","144.86.226.236","144.86.226.56","144.86.226.65","144.86.226.70","144.86.226.84","144.86.226.9","144.86.226.92","18.130.164.53","18.130.81.53","18.130.85.54","184.168.221.32","184.168.221.44","184.168.221.46","184.168.221.49","184.168.221.53","184.168.221.61","199.201.117.1","199.201.117.10","199.201.117.105","199.201.117.11","199.201.117.128","199.201.117.129","199.201.117.130","199.201.117.131","199.201.117.136","199.201.117.137","199.201.117.138","199.201.117.139","199.201.117.156","199.201.117.159","199.201.117.160","199.201.117.161","199.201.117.163","199.201.117.168","199.201.117.169","199.201.117.170","199.201.117.171","199.201.117.180","199.201.117.181","199.201.117.2","199.201.117.21","199.201.117.28","199.201.117.29","199.201.117.3","199.201.117.31","199.201.117.32","199.201.117.33","199.201.117.34","199.201.117.35","199.201.117.40","199.201.117.41","199.201.117.42","199.201.117.43","199.201.117.52","199.201.117.53","199.201.117.54","199.201.117.55","199.201.117.60","199.201.117.61","199.201.117.65","199.201.117.8","199.201.117.9","20.140.103.62","20.140.117.23","20.140.125.123","20.140.13.234","20.140.130.224","20.140.133.78","20.140.138.111","20.140.139.93","20.140.145.240","20.140.15.158","20.140.16.239","20.140.165.171","20.140.175.98","20.140.181.121","20.140.186.43","20.140.187.45","20.140.194.217","20.140.203.245","20.140.212.217","20.140.254.2","20.140.29.132","20.140.4.95","20.140.66.163","20.140.7.181","20.140.7.82","20.140.74.195","20.140.75.134","20.140.95.141","20.140.95.95","20.140.98.218","20.141.100.70","20.141.120.31","20.141.127.212","20.141.144.25","20.141.149.22","20.141.164.220","20.141.179.117","20.141.184.127","20.141.189.228","20.141.204.189","20.141.21.245","20.141.211.218","20.141.215.178","20.141.216.51","20.141.222.225","20.141.35.195","20.141.36.98","20.141.43.32","20.141.43.66","20.141.48.157","20.141.51.230","20.141.59.57","20.141.60.73","20.141.62.221","20.141.64.21","20.141.70.25","20.141.74.109","20.141.81.173","20.141.82.149","20.141.84.37","217.163.7.138","3.101.88.204","34.239.173.174","50.63.202.37","50.63.202.41","50.63.202.42","50.63.202.46","50.63.202.56","50.63.202.58","52.170.43.150","52.171.135.15","52.171.141.69","54.164.147.101","71.152.53.10","71.152.53.128","71.152.53.129","71.152.53.131","71.152.53.138","71.152.53.139","71.152.53.151","71.152.53.159","71.152.53.160","71.152.53.168","71.152.53.171","71.152.53.180","71.152.53.188","71.152.53.23","71.152.53.233","71.152.53.3","71.152.53.33","71.152.53.34","71.152.53.42","71.152.53.43","71.152.53.52","71.152.53.54","71.152.53.60","71.152.53.61","71.152.53.65","71.152.53.67","71.152.53.75","71.152.53.8","71.152.53.97","71.152.53.98","8.18.144.129","8.18.144.131","8.18.144.136","8.18.144.138","8.18.144.139","8.18.144.148","8.18.144.149","8.18.144.156","8.18.144.162","8.18.144.169","8.18.144.171","8.18.144.183","8.18.144.2","8.18.144.23","8.18.144.40","8.18.144.41","8.18.145.1","8.18.145.101","8.18.145.131","8.18.145.150","8.18.145.159","8.18.145.160","8.18.145.162","8.18.145.163","8.18.145.168","8.18.145.170","8.18.145.171","8.18.145.181","8.18.145.20","8.18.145.226","8.18.145.30","8.18.145.33","8.18.145.34","8.18.145.35","8.18.145.42","8.18.145.55","8.18.145.8","87.238.80.11","87.238.80.159","87.238.80.169","87.238.80.193","87.238.80.2","87.238.80.225","87.238.80.34","87.238.81.105","87.238.81.136","87.238.81.234","87.238.81.3","87.238.81.96","87.238.82.129","87.238.82.171","87.238.82.20","87.238.82.233","87.238.83.171","87.238.83.35","87.238.83.42","87.238.83.72","87.238.84.23","87.238.84.54","87.238.84.55","87.238.84.98","87.238.85.107","87.238.85.139","87.238.85.190","87.238.85.202","87.238.85.62","87.238.85.75","87.238.85.97","87.238.86.42","87.238.86.8","87.238.87.131","87.238.87.138","87.238.87.148","87.238.87.149","87.238.87.162","87.238.87.190","87.238.87.20","87.238.87.43","87.238.87.67","96.31.172.1","96.31.172.100","96.31.172.101","96.31.172.102","96.31.172.104","96.31.172.109","96.31.172.11","96.31.172.113","96.31.172.115","96.31.172.121","96.31.172.124","96.31.172.126","96.31.172.129","96.31.172.130","96.31.172.134","96.31.172.135","96.31.172.139","96.31.172.142","96.31.172.146","96.31.172.15","96.31.172.151","96.31.172.154","96.31.172.155","96.31.172.156","96.31.172.157","96.31.172.168","96.31.172.169","96.31.172.184","96.31.172.192","96.31.172.193","96.31.172.195","96.31.172.2","96.31.172.204","96.31.172.21","96.31.172.210","96.31.172.216","96.31.172.22","96.31.172.220","96.31.172.222","96.31.172.223","96.31.172.225","96.31.172.23","96.31.172.231","96.31.172.232","96.31.172.236","96.31.172.238","96.31.172.241","96.31.172.252","96.31.172.253","96.31.172.255","96.31.172.26","96.31.172.28","96.31.172.29","96.31.172.30","96.31.172.32","96.31.172.35","96.31.172.36","96.31.172.39","96.31.172.41","96.31.172.45","96.31.172.5","96.31.172.51","96.31.172.54","96.31.172.55","96.31.172.56","96.31.172.57","96.31.172.6","96.31.172.64","96.31.172.7","96.31.172.72","96.31.172.73","96.31.172.8","96.31.172.82","96.31.172.83","96.31.172.87","96.31.172.90","96.31.172.94","96.31.172.96","96.31.172.99"
}

with open(f'./{args.prefix}_extrahop_sunburst_ip_hits.csv', 'w') as f:
    f.write('timestamp,id,extrahop_id,display_name,macaddr,device_ipaddr,sunburst_ipaddr\n')
    for device_id in device_details:
        if args.verbose:
            print(f'Searching device {device_id}.', end='')
        url = 'https://' + host + '/api/v1/metrics'
        data = {
            "cycle": "auto",
            "from": relative_time,
            "metric_category": metric_category,
            "object_type": object_type,
            "metric_specs": [
                {
                    "name": metric_spec_name
                }
            ],
            "object_ids": [
                device_id
            ],
            "until": timestamp_end
        }

        conn.request('POST', f'/api/v1/metrics', json.dumps(data), headers=headers)
        response = conn.getresponse()
        rsp_json = json.loads(response.read().decode())

        for time_slice in rsp_json['stats']:
            for entry in time_slice['values'][0]:
                if entry['key']['addr'] in ti_ips:
                    ts = datetime.datetime.fromtimestamp(time_slice['time'] / 1000).strftime('%Y-%m-%d %H:%M:%S')
                    print(f'[{ts}] {device_id} ({device_details[device_id]["extrahop_id"]}) -> {entry["key"]["addr"]}')
                    f.write(f'{ts},{device_id},{device_details[device_id]["extrahop_id"]},'+
                        f'{device_details[device_id]["display_name"]},{device_details[device_id]["macaddr"]},'+
                        f'{device_details[device_id]["ipaddr"]},{entry["key"]["addr"]}\n')

            if args.verbose:
                print('.', end='')
        if args.verbose:
            print()
