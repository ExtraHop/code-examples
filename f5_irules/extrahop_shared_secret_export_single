# Updated 1/27/21
#
when RULE_INIT {
    # Here, you must define the name of the sideband virtual server to send secrets
    set static::virtual_server "extrahop_shared_secret_sideband"
}

when CLIENTSSL_HANDSHAKE {
    if { [ catch {
        if { [SSL::cipher version] eq "TLSv1.3" } {
            call handleMultiSecret
        }
        else {
            call handleSecret
        }
    } err ] } {
            log local0. [concat "Error:" $err]
            return
    }
}

when SERVERSSL_HANDSHAKE {
    if { [ catch {
        if { [SSL::cipher version] eq "TLSv1.3" } {
            call handleMultiSecret
        }
        else {
            call handleSecret
        }
    } err ] } {
            log local0. [concat "Error:" $err]
            return
    }
}

proc handleMultiSecret {} {
    set client_rand [SSL::clientrandom]

    set client_hs [SSL::tls13_secret client hs]
    set secret_message [binary format H* "f4[format %X [expr { ([string length $client_hs] / 2) + 33 } ]]0000[set client_rand][set client_hs]"]
    call sendSecret $secret_message

    set server_hs [SSL::tls13_secret server hs]
    set secret_message [binary format H* "f4[format %X [expr { ([string length $server_hs] / 2) + 33 } ]]0001[set client_rand][set server_hs]"]
    call sendSecret $secret_message

    set client_app [SSL::tls13_secret client app]
    set secret_message [binary format H* "f4[format %X [expr { ([string length $client_app] / 2) + 33 } ]]0002[set client_rand][set client_app]"]
    call sendSecret $secret_message

    set server_app [SSL::tls13_secret server app]
    set secret_message [binary format H* "f4[format %X [expr { ([string length $server_app] / 2) + 33 } ]]0003[set client_rand][set server_app]"]
    call sendSecret $secret_message

}

proc handleSecret {} {
    set client_rand [SSL::clientrandom]
    set secret [SSL::sessionsecret]

    set secret_message [binary format H* "f35000$client_rand$secret"]
    call sendSecret $secret_message
}

proc sendSecret { secret_message } {

    set length [string length $secret_message]
    # Verify that the message is the appropriate length (
    if { $length != 83 && $length != 68 && $length != 84}{
        return
    }

    set cmp_unit [TMM::cmp_unit]

    set key "${cmp_unit}_conn_${static::virtual_server}" ;# key for session table
    set conn [session lookup dest_addr $key] ;# conn = session table data for $key for this dest_addr

    if { $conn eq "" }{
        set conn [connect -timeout 1000 -idle 300 -status conn_status $static::virtual_server]
        if { $conn_status ne "connected" }{
            return
        }
        session add dest_addr $key "$conn" 300
    } else {
        # Attempt sideband connection re-use
        set conn_info [connect info -status $conn]
        set conn_state [lindex [lindex $conn_info 0] 0]
        if { $conn_state ne "connected" }{
            set conn [connect -timeout 1000 -idle 300 -status conn_status $static::virtual_server]
            if { $conn_status ne "connected" }{
                return
            }
            session add dest_addr $key "$conn" 300
        }
    }

    # Send secret message
    set send_bytes [send -timeout 1000 -status send_status $conn $secret_message]
    recv -timeout 1 $conn
}
