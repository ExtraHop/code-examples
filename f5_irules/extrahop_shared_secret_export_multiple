when RULE_INIT {
    # Here, you must define the name of the sideband virtual server to send secrets
    set static::edas {
        extrahop_shared_secret_sideband_eda01
        extrahop_shared_secret_sideband_eda02
    }
}

when CLIENTSSL_HANDSHAKE {
    if { [catch {call sendSecret [SSL::clientrandom] [SSL::sessionsecret]} ] } {
        log local0. "sideband vip unavailable"
        return
    }
}

when SERVERSSL_HANDSHAKE {
    if { [catch {call sendSecret [SSL::clientrandom] [SSL::sessionsecret]} ] } {
        log local0. "sideband vip unavailable"
        return
    }
}

proc sendSecret {client_rand secret} {

    set client_rand [SSL::clientrandom]
    set secret [SSL::sessionsecret]
    set cmp_unit [TMM::cmp_unit]

    set session_secret [binary format H* $client_rand$secret]
    set length [string length $session_secret]

    if { $length != 80 }{
        return
    }

    foreach eda $static::edas {
        set key "${cmp_unit}_conn_${eda}"

        set conn [session lookup dest_addr $key]

        if { $conn eq "" }{
            set conn [connect -timeout 1000 -idle 300 -status conn_status $eda]
            if { $conn_status ne "connected" }{
                return
            }
            session add dest_addr $key "$conn" 300
        }
        else {
            # Attempt sideband connection re-use
            set conn_info [connect info -status $conn]
            set conn_state [lindex [lindex $conn_info 0] 0]
            if { $conn_state ne "connected" }{
                set conn [connect -timeout 1000 -idle 300 -status conn_status $eda]
                if { $conn_status ne "connected" }{
                    return
                }
                session add dest_addr $key "$conn" 300
            }
        }

        # Send secret message
        set secret_message [binary format H* "f35000$client_rand$secret"]
        set send_bytes [send -timeout 1000 -status send_status $conn $secret_message]
        recv -timeout 1 $conn
    }

}
